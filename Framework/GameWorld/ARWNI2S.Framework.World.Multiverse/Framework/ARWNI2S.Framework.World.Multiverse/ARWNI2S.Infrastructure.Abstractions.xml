<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ARWNI2S.Infrastructure.Abstractions</name>
    </assembly>
    <members>
        <member name="T:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1">
            <summary>
            Paged list interface
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.PageIndex">
            <summary>
            Gets current page index
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.PageSize">
            <summary>
            Gets page size
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.TotalCount">
            <summary>
            Gets total elements count
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.TotalPages">
            <summary>
            Gets total pages
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.HasPreviousPage">
            <summary>
            Gets if current page has previous page
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Collections.Generic.IPagedList`1.HasNextPage">
            <summary>
            Gets if current page has next page
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Collections.Sorting.ISorter">
            <summary>
            Represents a List Sorter
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Collections.Sorting.ISorter.Sort(System.Collections.IList)">
            <summary>
            Sorts a list
            </summary>
            <param name="list"><see cref="T:System.Collections.IList"/> object to sort.</param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Collections.Sorting.ISwap">
            <summary>
            Interface que define metodos para la representacion de un intercambiador.
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Collections.Sorting.ISwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swap operation
            </summary>
            <param name="array">array to swap</param>
            <param name="left">left index</param>
            <param name="right">right index</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Collections.Sorting.ISwap.Set(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Set operation
            </summary>
            <param name="array">array to set</param>
            <param name="left">left index</param>
            <param name="right">right index</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Collections.Sorting.ISwap.Set(System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Set operation
            </summary>
            <param name="array">array to set</param>
            <param name="left">left index</param>
            <param name="obj">object to set</param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Configuration.IConfig">
            <summary>
            Represents a configuration from app settings
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.IConfig.Name">
            <summary>
            Gets a section name to load configuration
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Configuration.IConfig.GetOrder">
            <summary>
            Gets an order of configuration
            </summary>
            <returns>Order</returns>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Configuration.ISettings">
            <summary>
            Setting interface
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration">
            <summary>
            Interface for logger configuration. 
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.DefaultTraceLevel">
            <summary>
            The DefaultTraceLevel attribute specifies the default tracing level for all NI2S loggers, unless overridden by
            a specific TraceLevelOverride element.
            The default level is Info if this attribute does not appear.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.TraceFileName">
            <summary>
            The TraceFileName attribute specifies the name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.TraceFilePattern">
            <summary>
            The TraceFilePattern attribute specifies the pattern name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.TraceLevelOverrides">
            <summary>
            The TraceLevelOverride element provides a mechanism to allow the tracing level to be set differently for different
            parts of the NI2S system.
            The tracing level for a logger is set based on a prefix match on the logger's name.
            TraceLevelOverrides are applied in length order; that is, the override with the longest matching
            LogPrefix takes precedence and specifies the tracing level for all matching loggers.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.TraceToConsole">
            <summary>
            The TraceToConsole attribute specifies whether trace output should be written to the console.
            The default is not to write trace data to the console.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.LargeMessageWarningThreshold">
            <summary>
            The LargeMessageWarningThreshold attribute specifies when to generate a warning trace message for large messages.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.PropagateActivityId">
            <summary>
            The PropagateActivityId attribute specifies whether the value of Tracing.CorrelationManager.ActivityId should be propagated into entity calls, to support E2E tracing.
            The default is not to propagate ActivityId.
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Configuration.ITraceConfiguration.BulkMessageLimit">
            <summary>
            The BulkMessageLimit attribute specifies how to bulk (aggregate) trace messages with identical erro code.
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Entities.INI2SEntity">
            <summary>
            Represents the base interface for entities
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Entities.INI2SEntity.Id">
            <summary>
            Gets the entity id object
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Entities.INI2SUser.Id">
            <summary>
            Gets or sets the user id
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Entities.INI2SUser.TimeZoneId">
            <summary>
            Gets or sets the time zone id
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add and configure services
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="configuration">Configuration of the application</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.ConfigureEngine(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            Configure NI2S engine
            </summary>
            <param name="application">Builder for configuring a NI2S node's engine</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.Resolve``1(Microsoft.Extensions.DependencyInjection.IServiceScope)">
            <summary>
            Resolve dependency
            </summary>
            <param name="scope">Scope</param>
            <typeparam name="T">Type of resolved service</typeparam>
            <returns>Resolved service</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.Resolve(System.Type,Microsoft.Extensions.DependencyInjection.IServiceScope)">
            <summary>
            Resolve dependency
            </summary>
            <param name="type">Type of resolved service</param>
            <param name="scope">Scope</param>
            <returns>Resolved service</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.ResolveAll``1">
            <summary>
            Resolve dependencies
            </summary>
            <typeparam name="T">Type of resolved services</typeparam>
            <returns>Collection of resolved services</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngine.ResolveUnregistered(System.Type)">
            <summary>
            Resolve unregistered service
            </summary>
            <param name="type">Type of service</param>
            <returns>Resolved service</returns>
        </member>
        <member name="T:ARWNI2S.Infrastructure.IEngineFileProvider">
            <summary>
            A file provider abstraction
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The combined paths</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist
            </summary>
            <param name="path">The directory to create</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.CreateFile(System.String)">
            <summary>
            Creates a file in the specified path
            </summary>
            <param name="path">The path and name of the file to create</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.DeleteDirectory(System.String)">
            <summary>
            Depth-first recursive delete, with handling for descendant directories open in Windows Explorer.
            </summary>
            <param name="path">Directory path</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.DeleteFile(System.String)">
            <summary>
            Deletes the specified file
            </summary>
            <param name="filePath">The name of the file to be deleted. Wildcard characters are not supported</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk
            </summary>
            <param name="path">The path to test</param>
            <returns>
            true if path refers to an existing directory; false if the directory does not exist or an error occurs when
            trying to determine if the specified file exists
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.DirectoryMove(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location
            </summary>
            <param name="sourceDirName">The path of the file or directory to move</param>
            <param name="destDirName">
            The path to the new location for sourceDirName. If sourceDirName is a file, then destDirName
            must also be a file name
            </param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in
            a specified path, and optionally searches subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An enumerable collection of the full names (including paths) for the files in
            the directory specified by path and that match the specified search pattern
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed
            </summary>
            <param name="sourceFileName">The file to copy</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists
            </summary>
            <param name="filePath">The file to check</param>
            <returns>
            True if the caller has the required permissions and path contains the name of an existing file; otherwise,
            false.
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.FileLength(System.String)">
            <summary>
            Gets the length of the file in bytes, or -1 for a directory or non-existing files
            </summary>
            <param name="path">File path</param>
            <returns>The length of the file</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.FileMove(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path</param>
            <param name="destFileName">The new path and name for the file</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetAbsolutePath(System.String[])">
            <summary>
            Returns the absolute path to the directory
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The absolute path to the directory</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetAccessControl(System.String)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates the access control list (ACL) entries for a specified directory
            </summary>
            <param name="path">The path to a directory containing a System.Security.AccessControl.DirectorySecurity object that describes the file's access control list (ACL) information</param>
            <returns>An object that encapsulates the access control rules for the file described by the path parameter</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information</param>
            <returns>
            A System.DateTime structure set to the creation date and time for the specified file or directory. This value
            is expressed in local time
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of the subdirectories (including their paths) that match the
            specified search pattern in the specified directory
            </summary>
            <param name="path">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of subdirectories in path. This
            parameter can contain a combination of valid literal and wildcard characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) of the subdirectories that match
            the specified criteria, or an empty array if no directories are found
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string
            </summary>
            <param name="path">The path of a file or directory</param>
            <returns>
            Directory information for path, or null if path denotes a root directory or is null. Returns
            System.String.Empty if path does not contain directory information
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetDirectoryNameOnly(System.String)">
            <summary>
            Returns the directory name only for the specified path string
            </summary>
            <param name="path">The path of directory</param>
            <returns>The directory name</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetFileExtension(System.String)">
            <summary>
            Returns the extension of the specified path string
            </summary>
            <param name="filePath">The path string from which to get the extension</param>
            <returns>The extension of the specified path (including the period ".")</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string
            </summary>
            <param name="path">The path string from which to obtain the file name and extension</param>
            <returns>The characters after the last directory character in path</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension
            </summary>
            <param name="filePath">The path of the file</param>
            <returns>The file name, minus the last period (.) and all characters following it</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of files (including their paths) that match the specified search
            pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) for the files in the specified directory
            that match the specified search pattern, or an empty array if no files are found.
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information</param>
            <returns>A System.DateTime structure set to the date and time that the specified file</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in local time
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last
            written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in UTC time
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetOrCreateFile(System.String)">
            <summary>
            Creates or opens a file at the specified path for read/write access
            </summary>
            <param name="path">The path and name of the file to create</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/></returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetParentDirectory(System.String)">
            <summary>
            Retrieves the parent directory of the specified path
            </summary>
            <param name="directoryPath">The path for which to retrieve the parent directory</param>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.GetVirtualPath(System.String)">
            <summary>
            Gets a virtual path from a physical disk path.
            </summary>
            <param name="path">The physical disk path</param>
            <returns>The virtual path. E.g. "~/bin"</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.IsDirectory(System.String)">
            <summary>
            Checks if the path is directory
            </summary>
            <param name="path">Path for check</param>
            <returns>True, if the path is a directory, otherwise false</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.ReadAllBytesAsync(System.String)">
            <summary>
            Reads the contents of the file into a byte array
            </summary>
            <param name="filePath">The file for reading</param>
            <returns>
            A task that represents the asynchronous operation
            The task result contains a byte array containing the contents of the file
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.ReadAllTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading</param>
            <param name="encoding">The encoding applied to the contents of the file</param>
            <returns>
            A task that represents the asynchronous operation
            The task result contains a string containing all lines of the file
            </returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading</param>
            <param name="encoding">The encoding applied to the contents of the file</param>
            <returns>A string containing all lines of the file</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.WriteAllBytesAsync(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array to the file
            </summary>
            <param name="filePath">The file to write to</param>
            <param name="bytes">The bytes to write to the file</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.WriteAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding,
            and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to</param>
            <param name="contents">The string to write to the file</param>
            <param name="encoding">The encoding to apply to the string</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IEngineFileProvider.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding,
            and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to</param>
            <param name="contents">The string to write to the file</param>
            <param name="encoding">The encoding to apply to the string</param>
        </member>
        <member name="P:ARWNI2S.Infrastructure.IEngineFileProvider.RootPath">
            <summary>
            Gets or sets the absolute path to the directory that contains the application content files.
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.INI2SStartup">
            <summary>
            Represents object for the configuring services and middleware on application startup
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.INI2SStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add and configure any of the middleware
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="configuration">Configuration of the application</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.INI2SStartup.Configure(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            Configure the using of added middleware
            </summary>
            <param name="application">Builder for configuring an application's request pipeline</param>
        </member>
        <member name="P:ARWNI2S.Infrastructure.INI2SStartup.Order">
            <summary>
            Gets order of this startup configuration implementation
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.IStartupTask">
            <summary>
            Interface which should be implemented by tasks run on startup
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.IStartupTask.Execute">
            <summary>
            Executes a task
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.IStartupTask.Order">
            <summary>
            Gets order of this startup task implementation
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.ITypeFinder">
            <summary>
            Classes implementing this interface provide information about types 
            to various services in the DragonCorp engine.
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.ITypeFinder.FindClassesOfType``1(System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.ITypeFinder.FindClassesOfType(System.Type,System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <param name="assignTypeFrom">Assign type from</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
            <returns></returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.ITypeFinder.GetAssemblies">
            <summary>
            Gets the assemblies related to the current implementation.
            </summary>
            <returns>A list of assemblies</returns>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Logging.ILogConsumer">
            <summary>
            An interface used to consume log entries. 
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Logging.ILogConsumer.Log(ARWNI2S.Infrastructure.Logging.LogLevel,ARWNI2S.Infrastructure.Logging.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging.
            This method should be very fast, since it is called synchronously during NI2S logging.
            </summary>
            <param name="level">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the NI2S node client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="errorCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'. 
            In general, all log entries at severity=Error or greater should specify an explicit error code value.</param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Logging.IFlushableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Flush function is also supported. 
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Logging.IFlushableLogConsumer.Flush">
            <summary>
            Flush any pending log writes.
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Logging.ICloseableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Close function is also supported. 
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Logging.ICloseableLogConsumer.Close">
            <summary>
            Close this log.
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Logging.LogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Off">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Verbose2">
            <summary>
            
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LogLevel.Verbose3">
            <summary>
            
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Logging.LoggerType">
            <summary>
            The TraceLogger class distinguishes between five categories of loggers:
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LoggerType.Host">
            <summary>
            Logs that are written by the NI2S Host. 
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LoggerType.Runtime">
            <summary>
            Logs that are written by the NI2S run-time itself.
            This category should not be used by application code. 
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LoggerType.NodeEntity">
            <summary>
            Logs that are written by node entities.
            This category should be used by code that runs as NI2S entities in a node. 
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LoggerType.Application">
            <summary>
            Logs that are written by the scene application.
            This category should be used by node client-side application code. 
            </summary>
        </member>
        <member name="F:ARWNI2S.Infrastructure.Logging.LoggerType.Provider">
            <summary>
            Logs that are written by the node providers.
            This category should be used by node providers. 
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Memory.IPool`1">
            <summary>
            The basic interface of smart pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.IPool`1.Initialize(System.Int32,System.Int32)">
            <summary>
            Initializes the specified min pool size.
            </summary>
            <param name="minPoolSize">The min size of the pool.</param>
            <param name="maxPoolSize">The max size of the pool.</param>
            <returns></returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.IPool`1.Push(`0)">
            <summary>
            Pushes the specified item into the pool.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.IPool`1.TryGet(`0@)">
            <summary>
            Tries to get one item from the pool.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Memory.IPoolInfo">
            <summary>
            The pool information interface
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Memory.IPoolInfo.MinPoolSize">
            <summary>
            Gets the min size of the pool.
            </summary>
            <value>
            The min size of the pool.
            </value>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Memory.IPoolInfo.MaxPoolSize">
            <summary>
            Gets the max size of the pool.
            </summary>
            <value>
            The max size of the pool.
            </value>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Memory.IPoolInfo.AvailableItemsCount">
            <summary>
            Gets the avialable items count.
            </summary>
            <value>
            The avialable items count.
            </value>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Memory.IPoolInfo.TotalItemsCount">
            <summary>
            Gets the total items count, include items in the pool and outside the pool.
            </summary>
            <value>
            The total items count.
            </value>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Memory.IPoolSource">
            <summary>
            IPoolSource
            </summary>
        </member>
        <member name="P:ARWNI2S.Infrastructure.Memory.IPoolSource.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Memory.IPoolSourceCreator`1">
            <summary>
            IPoolSourceCreator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.IPoolSourceCreator`1.Create(System.Int32,`0[]@)">
            <summary>
            Creates the specified size.
            </summary>
            <param name="size">The size.</param>
            <param name="poolItems">The pool items.</param>
            <returns></returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.ISourcedPool`1.Initialize(System.Int32,System.Int32,ARWNI2S.Infrastructure.Memory.IPoolSourceCreator{`0})">
            <summary>
            Initializes the specified min pool size.
            </summary>
            <param name="minPoolSize">The min size of the pool.</param>
            <param name="maxPoolSize">The max size of the pool.</param>
            <param name="sourceCreator">The source creator.</param>
            <returns></returns>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.ISourcedPool`1.Push(`0)">
            <summary>
            Pushes the specified item into the pool.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Memory.ISourcedPool`1.TryGet(`0@)">
            <summary>
            Tries to get one item from the pool.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Metadata.FrameworkPartAttribute">
            <summary>
            Specifies that an assembly does not contain application code.
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.IDependencyTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IDependencyTelemetryConsumer.TrackDependency(System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dependencyName"></param>
            <param name="commandName"></param>
            <param name="startTime"></param>
            <param name="duration"></param>
            <param name="success"></param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.IEventTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IEventTelemetryConsumer.TrackEvent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            
            </summary>
            <param name="eventName"></param>
            <param name="properties"></param>
            <param name="metrics"></param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.IExceptionTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IExceptionTelemetryConsumer.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="properties"></param>
            <param name="metrics"></param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.TrackMetric(System.String,System.Double,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="properties"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.TrackMetric(System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="properties"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.IncrementMetric(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.IncrementMetric(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.DecrementMetric(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IMetricTelemetryConsumer.DecrementMetric(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.IRequestTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.IRequestTelemetryConsumer.TrackRequest(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="startTime"></param>
            <param name="duration"></param>
            <param name="responseCode"></param>
            <param name="success"></param>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.ITelemetryConsumer">
            <summary>
            Marker interface for all Telemetry Consumers
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITelemetryConsumer.Flush">
            <summary>
            Flush ITelemetryConsumer. 
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITelemetryConsumer.Close">
            <summary>
            Close ITelemetryConsumer. 
            </summary>
        </member>
        <member name="T:ARWNI2S.Infrastructure.Telemetry.ITraceTelemetryConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITraceTelemetryConsumer.TrackTrace(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITraceTelemetryConsumer.TrackTrace(System.String,ARWNI2S.Infrastructure.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="severity"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITraceTelemetryConsumer.TrackTrace(System.String,ARWNI2S.Infrastructure.Logging.LogLevel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="severity"></param>
            <param name="properties"></param>
        </member>
        <member name="M:ARWNI2S.Infrastructure.Telemetry.ITraceTelemetryConsumer.TrackTrace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="properties"></param>
        </member>
    </members>
</doc>
